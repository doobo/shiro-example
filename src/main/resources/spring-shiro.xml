<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">
    <!-- 登录,cas服务器地址-->
    <bean id="casRealm" class="vip.ipav.shiro.realm.MyCasRealm">
        <!--CAS服务器地址-->
        <property name="casServerUrlPrefix" value="${cas.casServerUrlPrefix}"/>
        <!--CAS客户端地址-->
        <property name="casService" value="${cas.casService}"/>
    </bean>
    <!--CAS过滤器，保证登录后返回原地址-->
    <bean id="casFilter" class="org.apache.shiro.cas.CasFilter">
        <property name="successUrl" value="${cas.successUrl}"/>
        <property name="failureUrl" value="${cas.failureUrl}"/>
    </bean>
    <!-- 注销 -->
    <bean id="logout" class="org.apache.shiro.web.filter.authc.LogoutFilter">
        <property name="redirectUrl" value="${cas.redirectUrl}"/>
    </bean>

    <bean id="casSubjectFactory" class="org.apache.shiro.cas.CasSubjectFactory"/>
    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realms">
            <list>
                <ref bean="casRealm"/>
            </list>
        </property>
        <!--添加下面sessionManager，会首页死循环，可把首页不拦截anon，原因未知-->
        <!--<property name="sessionManager" ref="sessionManager"/>-->
        <property name="cacheManager" ref="cacheManager" />
        <property name="subjectFactory" ref="casSubjectFactory" />
    </bean>
    <bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod" value="org.apache.shiro.SecurityUtils.setSecurityManager" />
        <property name="arguments" ref="securityManager" />
    </bean>
    <!-- Shiro的Web过滤器 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <property name="loginUrl" value="${cas.loginUrl}"/>
        <property name="successUrl" value="/bbc.jsp"/>
        <property name="filters">
            <util:map>
                <entry key="cas" value-ref="casFilter" />
                <entry key="logout" value-ref="logout" />
            </util:map>
        </property>
        <property name="filterChainDefinitions">
            <!-- URL过滤，/** = user必须放最后 -->
            <value>
                / = authc<!-- anon过滤器表示没有权限也可访问 -->
                /index.jsp = authc
                /bbc.jsp = authc,roles[admin]
                /next = authc,perms["write","read"]
                /write = authc,perms["write"]
                /logout = logout <!-- 表示访问logout时就直接访问logout这个过滤器，即直接退出 -->
                /login = cas
                /** = authc <!-- 表示其他的所有路径都要通过认证后才能访问 -->
            </value>
        </property>
    </bean>
    <!-- shiro redisManager -->
    <!--https://github.com/alexxiyang/shiro-redis-->
    <bean id="redisManager" class="org.crazycake.shiro.RedisManager">
        <property name="host" value="192.168.1.110"/>
        <property name="port" value="6379"/>
        <property name="expire" value="1800"/>
        <property name="timeout" value="10000"/>
        <property name="password" value="doobo"/>
        <property name="database" value="0"/>
    </bean>
    <!-- redisSessionDAO -->
    <bean id="redisSessionDAO" class="org.crazycake.shiro.RedisSessionDAO">
        <property name="redisManager" ref="redisManager" />
    </bean>
    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <!-- 会话超时时间，单位：毫秒 -->
        <property name="globalSessionTimeout" value="${cas.globalSessionTimeout}"/>
        <property name="deleteInvalidSessions" value="true" />
        <property name="sessionIdCookieEnabled" value="true" />
        <property name="sessionIdCookie" ref="sessionIdCookie" />
        <!-- 定时清理失效会话, 清理用户直接关闭浏览器造成的孤立会话 -->
        <property name="sessionValidationSchedulerEnabled" value="true" />
        <property name="sessionValidationInterval" value="${cas.globalSessionTimeout}"/>
        <property name="sessionDAO" ref="redisSessionDAO" />
    </bean>
    <!-- cacheManager -->
    <bean id="cacheManager" class="org.crazycake.shiro.RedisCacheManager">
        <property name="redisManager" ref="redisManager" />
    </bean>
    <!-- 会话Cookie模板 -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!--指定本系统SESSIONID, 默认为: JSESSIONID-->
        <constructor-arg name="name" value="sid" />
        <property name="httpOnly" value="true" />
        <property name="maxAge" value="-1"/>
    </bean>
    <!--下面配置到spring-mvc文件里，可以到Controller注解里面进行AOP控制，放到ApplicationContext文件里，可以到Service类里AOP控制-->
    <!-- Shiro生命周期处理器-->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
    <!-- AOP式方法级权限检查 -->
    <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
          depends-on="lifecycleBeanPostProcessor">
        <property name="proxyTargetClass" value="true"/>
    </bean>
    <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
        <property name="securityManager" ref="securityManager" />
    </bean>
</beans>