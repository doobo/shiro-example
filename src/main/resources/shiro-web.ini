[main]
sha256Matcher = org.apache.shiro.authc.credential.Sha256CredentialsMatcher
myRealm = vip.ipav.shiro.simple.MyShiroRealm
authc.loginUrl=/toLogin.jsp
roles.unauthorizedUrl=/
perms.unauthorizedUrl=/


#定义成功后跳转的URL
#authc.successUrl=/
#定义登陆地址，不需求myRealm，基于表单的拦截器身份验证
#authc.loginUrl=/formfilterlogin
#定义传给后端的用户名和密码参数名称
#authc.usernameParam=username
#authc.passwordParam=password
#登录失败时的request属性key
#authc.failureKeyAttribute=shiroLoginFailure


[users]
#提供了对用户/密码及其角色的配置，用户名=密码，角色1，角色2
#username=password,role1,role2
admin = admin
root = root
doobo = password
lonestarr = vespa, goodguy, schwartz
darkhelmet = ludicrousspeed, badguy, schwartz

[roles]
#提供了角色及权限之间关系的配置，角色=权限1，权限2
#role1=permission1,permission2
# 'admin' role has all permissions, indicated by the wildcard '*'
admin = *
# The 'schwartz' role can do anything (*) with any lightsaber:
schwartz = lightsaber:*
# The 'goodguy' role is allowed to 'drive' (action) the winnebago (type) with
# license plate 'eagle5' (instance specific id)
goodguy = winnebago:drive:eagle5

[urls]
/ = anon
/index.jsp = authc, roles[admin]
/next.jsp = authc,perms["write","read"]
/write.jsp = authc,perms["writ"]
#所有用户
#/user/create = anon
#登陆用户能访问
#/user/** = authc
#/admin/** = authc, roles[admin]
#/rest/** = authc, rest
#/remoting/rpc/** = authc, perms["remot:invoke"]